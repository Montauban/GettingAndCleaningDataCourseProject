cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
x <- matrix(1:6, 2, 3)
x
for (i in seq_len(nrow(x))) {}
add2 <- function(x,y){
x + y
}
add2(10,15)
above <- function(x, n){
use <- x > n
x[use]
}
x 2:14
x <- 2:10
above(x,5)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
column_mean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y,[,i])
}
means
}
column_mean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y,[,i])
}
means
}
column_mean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
clear
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
names(unclass(p))
p$sec
p <- as.POSIXct(x)
x
unclass(x)
x$sec
p <- as.POSIXlt(x)
p$sec
x <- as.Date("2014-01-01")
y <- strptime("9 Jan 2014 11:34:21", %d %b %Y %H:%S)
y <- strptime("9 Jan 2014 11:34:21", "%d %b %Y %H:%S")
x-y
x <- as.POSIXlt(x)
x-y
myplot <- function(x,y, type="1", ...)
plot(x,y, type=type, ...)
myplot(5,10)
arges(paste)
args(paste)
args(cat)
paste("a", "b", sep= "; ")
cube <- function(x,n){
x^3
}
cube(9)
cube(3)
z <- 10
f <- function(x){
g <- function(y) {
y+z
}
z <- 4
x + g(x)
}
f(3)
cube <- function(x,n){
x^3
}
cube(3)
x <- list(a=1:5, b=rnorm(10))
x
x <- list(a = 1:14, b=rnorm(10), c=rnorm(20, 1), d=rnorm(100, 5))
x
lapply(x, mean)
sapply(x, mean)
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
apply(x, 2, sum)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile,probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2,2,10))
a
a <- array(rnorm(2 * 2 * 10), c(2,2,10))
apply(a, c(1,2), mean)
rowMeans(a, dims = 2)
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- g1(3, 10)
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify=FALSE)
tapply(x, f, range)
str(split)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x,f)
lapply(split(x,f), mean)
x <- rnorm(10)
gender <- gl(2,5)
race <- gl(5,2)
gender
race
interaction(gender, race)
str(split(x, list(f1, f2)))
str(split(x, list(gender, race)))
str(split(x, list(gender, race), drop=TRUE))
str(sapply)
str(mapply)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd){rnorm(n, mean, sd)}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise, 1:5, 1:5, 2)
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
quit()
options(error = recover)
read.csv("nothing")
matrix (1:40, nrow = 5, byrow = TRUE)
a <- matrix (1:40, nrow = 5, byrow = TRUE)
a
x[, 5]
x[1, 5]
a[,5]
a[2,]
a[2,2]
dim(a)
a[,c(1,3)]
a <- matrix (1:40, nrow = 5, byrow = FALSE)
a
a[,c(1,3)]
a[c(1,3), ]
x <- list(a=1:7, b=rnorm(12))
x
x <- list(a=1:7, b=rnorm(14))
x
lapply(x, mean)
str(lapply)
x <- 1:4
x
lapply(x, runif)
lapply(x, )
lapply(x, runif)
lapply(x, runif, min=0, max=10)
df <- data.frame(lapply(x, runif))
x <- list(a=matrix(1:4, 2, 2), b=matrix(1:6, 3, 2))
x
y <- lapply(x, function(yo) yo[,1])
y
y <- lapply(x, function(yo) yo[1, ])
y
x <- list(a= 1:14, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
s
x
mean(x)
lapply(x, mean)
sapply(x, mean)
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
apply(x, 2, sum)
apply(x, 2, quantile, probs=c(0.10, .070))
apply(x, 2, quantile, probs=c(0.10, 0.70))
apply(x, 2, quantile, probs=.75
)
apply(x, 2, quantile, probs=c(0.10, 0.70, 0.90))
a <- array(rnorm(2*2*10), c(2,2,10))
a <- rnorm(2*2*10)
b <- v(2,2,10)
b <- c(2,2,10)
a
b
a <- rnorm(40)
a
a <- rnorm(40, 3)
a
b
x <- array(a, b)
x
apply(x, c(1,2), mean)
x <- c(rnorm(10), runif(10), rnorm(10, 3), dim(5,6))
x <- c(rnorm(10), runif(10), rnorm(10, 3), dim= c(5,6))
x
x <- c(rnorm(10), runif(10), rnorm(10, 3))
f <- gl(3,10)
f
tapply(x, f, mean,)
tapply(x, f, mean)
tapply(x, f, mean, simplify=FALSE)
tapply(x, f, range)
tapply(x, f, range, simplify + TRUE)
tapply(x, f, range, simplify = TRUE)
tapply(x, f, range, simplify = FALSE)
x <- c(rnorm(10), runif(10), rnorm(10, 3))
f <-gl(3,10)
x
f
split(x,f)
lapply(x,f)
lapply(spli(x,f), mean)
lapply(split(x,f), mean)
f
x <- rnorm(10)
gender <- gl(2,5)
race <- gl(5,2)
x
gender
race
interaction(gender, race)
str(split(x, list(gender, race)))
str(split(x, list(gender, race), dropna=true))
str(split(x, list(gender, race), drop=true))
str(split(x, list(gender, race), drop=TRUE))
mapply(1:4)
mapply(rep, 1:4)
mapply(rep, 1:12)
mapply(rep, 1:12, 12;1)
mapply(rep, 1:12, 12:1)
mapply(rep, 1:12, 1:10)
mapply(rep, 1:12, 1:12)
sd(10)
sd(10, 2)
noise <- function(n, mean, sd){}
rnorm(n, mean, sd)
rnorm(n, mean, sd)}
library(datasets)
data(iris)
?iris
summary(iris)
iris
iris$Sepal.Length
tapply(iris$Sepal.Length, "virginica", mean)
tapply(iris$Sepal.Length, virginica, mean)
tapply(iris$Sepal.Length, species, mean)
tapply(iris$Sepal.Length, Species, mean)
x <- iris$Sepal.Length
x
f <- (iris$vSpecies == "verginica")
f
f <- iris$Species
f
tapply(x, f, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
horse <- with(mtcars, tapply(hp, cyl, mean))
horse
diff <- horse$8 - horse$4
horse
gorse$1
horse[1]
absolute <- horse[3] - horse[1]
absolute
debug(ls)
ls
x <- rnorm(1:8, 5)
x
solve(x)
x <- rnorm(matrix(1:8, 2, 4))
x
solve(x)
x <- matrix(1:8, 2, 4)
x
solve(y)
x <- matrix(1:16, 4, 4)
x
solve(x)
y <- rnorm(x)
y
solve(y)
x <- matrix(1,0,0,0,1,0,0,0,1)
x <- matrix((1,0,0,0,1,0,0,0,1), 3, 3)
x <- matrix(1,0,0,0,1,0,0,0,1), 3, 3)
x <- matrix(c(1,0,0,0,1,0,0,0,1), 3, 3))
x <- c(matrix(1,0,0,0,1,0,0,0,1), 3, 3))
x <- matrix(1,0,0,0,1,0,0,0,1)
x <- matrix(c(1,0,0,0,1,0,0,0,1), nrow=3, ncol=3)
x
solve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
x
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
b <- (c(1,0,0,0,1,0,0,0,1))
b
a(b)
a(1)
a(1,2,3,4)
a
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(5)
Guess <- function(max) {
secret.number <- sample(1:max, 1)
total.guesses <- 1
finished <- FALSE
message(sprintf("I'm thinking of a number from 1 to %d.", max))
self.list <- list(
get.info = function() {
message(
sprintf(
"You %s guessed the number!",
if (finished) "have already"
else "still haven't"
)
)
message(sprintf("Guess number: %d", total.guesses))
message(sprintf("The number is taken from 1 to %d.", max))
},
get.clues = function(guess) {
if (finished) message("You've already guessed my number!")
else {
if (guess == secret.number) {
message("Congratulations!")
message(sprintf("You got it in %d guesses!", total.guesses))
finished <<- TRUE
} else {
if (secret.number < guess) message("Too high!")
else message("Too low!")
total.guesses <<- total.guesses + 1
}
}
}
)
class(self.list) <- "Guess"
self.list
}
game <- Guess(100)
}
getwd()
ls
setwd("/Users/petersali/Data\ Science/John\ Hopkins/Workspace/ProgrammingAssignment2")
getwd()
source('cachematrix_test.R')
x <- c(1:16, nomcol=4, numrow=4)
x
x <- matrix(1:16, nomcol=4, numrow=4)
x <- matrix(1:16, 4, 4)
x
makeCacheMatrix(x)
cacheSolve(x)
x
fun <- makeCacheMatrix(x)
fun
cacheSolve(fun)
cacheSolve(fun)
1
2
cacheSolve(fun)
x
b <- makeCacheMatrix(x)
cacheSolve(b)
source('cachematrix_test.R')
x <- matrix(1:16, 4, 4)
b <- makeCacheMatrix(x)
cacheSolve(b)
x <- matrix(1:4, 2, 2)
b <- makeCacheMatrix(x)
cacheSolve(b)
x <- matrixc((1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1), numrow=4, numcol=4)
x <- matrix(c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1), numrow=4, numcol=4)
x <- c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)
y <- matrix(x, numrow=4, numcol=4)
numrow help
help(numrow)
??numrow
y <- matrix(x, 4, 4)
y
b <- makeCacheMatrix(y)
cacheSolve(b)
x <- c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)
b <- makeCacheMatrix(y)
cacheSolve(b)
x <- c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0)
b <- makeCacheMatrix(y)
cacheSolve(b)
x <- c(1,0,0,2,0,1,0,0,0,0,1,0,0,0,0,5)
b <- makeCacheMatrix(y)
cacheSolve(b)
x <- c(1,0,0,2,0,1,0,0,0,0,1,0,0,0,0,5)
b <- makeCacheMatrix(x)
cacheSolve(b)
x
x <- c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)
x
x <- c(1,0,0,2,0,1,0,0,0,0,1,0,0,0,0,5)
y <- matrix(x, 4, 4)
b <- makeCacheMatrix(y)
cacheSolve(b)
b$get_vector()
b$set_vector(y)
y
b$mtrx
x <- c(1,0,0,2,0,1,0,0,0,0,1,0,0,0,0,5)
y <- matrix(x, 4, 4)
b <- makeCacheMatrix(y)
cacheSolve(b)
getwd()
setwd("/Users/petersali/Data Science/John Hopkins/REPOS/")
source()
source("cachematrix.R")
ls
getwd()
source('cachematrix.R')
source('cachematrix.R')
x <- c(1,0,0,2,0,1,0,0,0,0,1,0,0,0,0,5)
y <- matrix(x, 4, 4)
y
b <- makeCacheMatrix(y)
cacheSolve(b)
x <- c(1,0,0,2,0,1,0,0,0,0,1,0,0,0,0,5)
y <- matrix(x, 4, 4)
b <- makeCacheMatrix(y)
cacheSolve(b)
